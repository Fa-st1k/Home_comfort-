import json
import telebot
import json
import random
import string
import tkinter as tk
from tkinter import messagebox, font, simpledialog
from view import Hello, Order, Payment, Basket, Edit_the_shopping_cart, Exit
from collections import Counter


def add_employee():
    root6 = tk.Tk()
    root6.title("Employee Registration")
    root6.geometry("400x400")

    labels = ["Имя", "Фамилия", "Отчество", "Возраст", "место работы", "опыт", "ID"]
    entries = []
    for label_text in labels:
        label = tk.Label(root6, text=label_text)
        label.pack()
        entry = tk.Entry(root6)
        entry.pack()
        entries.append(entry)

    employee_list = []

    def submit_callback():
        The_database = {}
        for i, entry in enumerate(entries):
            value = entry.get()
            if i == 3:
                value = int(value)
            The_database[labels[i]] = value

        employee_list.append(The_database)

        with open('The_database.json', 'w', encoding='utf-8') as f:
            json.dump(employee_list, f, ensure_ascii=False, indent=2)

        success_label = tk.Label(root6, text="Сотрудник успешно принят.")
        success_label.pack()

        for entry in entries:
            entry.delete(0, tk.END)

    submit_button = tk.Button(root6, text="Отправить", command=submit_callback)
    submit_button.pack()

    root6.mainloop()

def editing_employees():
    import tkinter as tk
    from tkinter import ttk, messagebox, scrolledtext
    import json

    root = tk.Tk()
    root.title("Редактор базы данных сотрудников")

    style = ttk.Style()
    style.theme_use("default")
    style.configure("AccentButton.TButton", background="#4285F4", foreground="white", font=("Arial", 12))

    with open('the_database.json', 'r', encoding='utf-8') as f:
        data = json.load(f)

    edit_window = None

    def open1():
        try:
            with open('the_database.json', 'r', encoding='utf-8') as f:
                employees = json.load(f)

        except FileNotFoundError:
            employees = []

        employee_window = tk.Toplevel(root)
        employee_window.title("Список сотрудников")

        employee_list = tk.Listbox(employee_window, width=50)
        employee_list.pack(side=tk.LEFT, fill=tk.BOTH)

        for employee in employees:
            try:
                name = f"{employee['Имя']} {employee['Фамилия']} {employee['Отчество']}"
                age = employee['Возраст']
                position = employee['место работы']
                experience = employee['опыт']
                employee_id = employee['ID']
                employee_list.insert(tk.END, f"{name} ({age}) - {position}, опыт: {experience}, ID: {employee_id}")
            except KeyError:
                employee_list.insert(tk.END, f"Отсутствующий ключ в данных о сотруднике: {employee}")

    def edit_employee(employee_id):
        global edit_window

        if edit_window is not None:
            edit_window.destroy()

        if any(d["ID"] == employee_id for d in data):
            employee = next(d for d in data if d["ID"] == employee_id)

            def update_employee(choice, new_value):
                if choice == "Имя":
                    employee['Имя'] = new_value
                elif choice == "Фамилия":
                    employee['Фамилия'] = new_value
                elif choice == "Отчество":
                    employee['Отчество'] = new_value
                elif choice == "Возраст":
                    employee['Возраст'] = new_value
                elif choice == "место работы":
                    employee['желаемое положение'] = new_value
                elif choice == "опыт":
                    employee['опыт'] = new_value
                elif choice == "ID":
                    employee['ID'] = new_value

                with open('the_database.json', 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)

                messagebox.showinfo("Успешно", f"{choice} успешно обновлено.")

            edit_window = tk.Toplevel(root)
            edit_window.title(f"Редактирование сотрудника {employee_id}")

            employee_info = f"ID: {employee_id}\n" \
                            f"Имя: {employee['Имя']}\n" \
                            f"Фамилия: {employee['Фамилия']}\n" \
                            f"Отчество: {employee['Отчество']}\n" \
                            f"Возраст: {employee['Возраст']}\n" \
                            f"желаемое положение: {employee['место работы']}\n" \
                            f"опыт: {employee['опыт']}"

            info_label = ttk.Label(edit_window, text=employee_info, font=("Arial", 12))
            info_label.pack(pady=10)

            choice_label = ttk.Label(edit_window, text="Что бы вы хотели изменить?", font=("Arial", 12))
            choice_label.pack(pady=5)

            choice_var = tk.StringVar()
            choice_dropdown = ttk.Combobox(edit_window, textvariable=choice_var,
                                           values=["Имя", "Фамилия", "Отчество", "Возраст", "место работы",
                                                   "опыт", "ID"])
            choice_dropdown.pack(pady=5)

            new_value_label = ttk.Label(edit_window, text="Введите новое значение:", font=("Arial", 12))
            new_value_label.pack(pady=5)

            new_value_entry = ttk.Entry(edit_window, font=("Arial", 12))
            new_value_entry.pack(pady=5)

            def save_changes():
                choice = choice_var.get()
                new_value = new_value_entry.get()
                update_employee(choice, new_value)

            save_button = ttk.Button(edit_window, text="Сохранить изменения", command=save_changes,
                                     style="AccentButton.TButton")
            save_button.pack(pady=10)

        else:
            messagebox.showerror("Ошибка", "Неверный идентификатор сотрудника.")

    main_frame = ttk.Frame(root)
    main_frame.pack(pady=20)

    edit_employee_window = ttk.Frame(main_frame)
    edit_employee_window.pack(pady=10)

    employee_id_label = ttk.Label(edit_employee_window, text="Введите идентификатор сотрудника:", font=("Arial", 12))
    employee_id_label.pack(side="left", padx=5)

    employee_id_entry = ttk.Entry(edit_employee_window, font=("Arial", 12))
    employee_id_entry.pack(side="left", padx=5)

    def start_editing():
        employee_id = employee_id_entry.get()
        edit_employee(employee_id)

    edit_button = ttk.Button(edit_employee_window, text="Редактировать", command=start_editing,
                             style="AccentButton.TButton")
    edit_button.pack(side="left", padx=5)

    show_code_button = ttk.Button(main_frame, text="Показать сотрудников", command=open1, style="AccentButton.TButton")
    show_code_button.pack(pady=10)

    root.mainloop()


def get_all_employees():
    def open1():
        try:
            with open('the_database.json', 'r', encoding='utf-8') as f:
                employees = json.load(f)

        except FileNotFoundError:
            employees = []

        employee_window = tk.Toplevel(root)
        employee_window.title("Список сотрудников")

        employee_list = tk.Listbox(employee_window, width=50)
        employee_list.pack(side=tk.LEFT, fill=tk.BOTH)

        for employee in employees:
            try:
                name = f"{employee['Имя']} {employee['Фамилия']} {employee['Отчество']}"
                age = employee['Возраст']
                position = employee['место работы']
                experience = employee['опыт']
                employee_id = employee['ID']
                employee_list.insert(tk.END, f"{name} ({age}) - {position}, опыт: {experience}, ID: {employee_id}")
            except KeyError:
                employee_list.insert(tk.END, f"Отсутствующий ключ в данных о сотруднике: {employee}")

        def show_employee_details(event):
            selection = employee_list.curselection()
            if selection:
                index = selection[0]
                employee_data = employees[index]
                details_text.delete(1.0, tk.END)
                details_text.insert(tk.END, f"Имя: {employee_data.get('Имя', 'Неизвестно')}\n")
                details_text.insert(tk.END, f"Фамилия: {employee_data.get('Фамилия', 'Неизвестно')}\n")
                details_text.insert(tk.END, f"Отчество: {employee_data.get('Отчество', 'Неизвестно')}\n")
                details_text.insert(tk.END, f"Возраст: {employee_data.get('Возраст', 'Неизвестно')}\n")
                details_text.insert(tk.END,
                                    f"Место работы: {employee_data.get('Место работы', 'Неизвестно')}\n")
                details_text.insert(tk.END, f"Опыт: {employee_data.get('опыт', 'Неизвестно')}\n")
                details_text.insert(tk.END, f"ID: {employee_data.get('ID', 'Неизвестно')}\n")

        employee_list.bind('<<ListboxSelect>>', show_employee_details)

        details_frame = tk.Frame(employee_window)
        details_frame.pack(side=tk.LEFT, fill=tk.BOTH)

        details_text = tk.Text(details_frame, width=40, height=20)
        details_text.pack(fill=tk.BOTH)

    root = tk.Tk()
    root.title("Список сотрудников")

    get_employees_button = tk.Button(root, text="Получить список сотрудников", command=open1)
    get_employees_button.pack()

    root.mainloop()


def removing_employees():
    root7 = tk.Tk()
    root7.title("Employee Management")
    root7.geometry("400x200")


    id_label = tk.Label(root7, text="ID сотрудника")
    id_label.pack()
    id_entry = tk.Entry(root7)
    id_entry.pack()


    def remove_employee():
        employee_id = id_entry.get()
        removed_employee = removing_employees(employee_id)

        if removed_employee:
            display_success(f"Сотрудник с ID {removed_employee['ID']} удален.")
        else:
            display_error("Неверный ID сотрудника.")

        id_entry.delete(0, tk.END)

    def removing_employees(employee_id):
        # Считайте данные из файла
        with open('the_database.json', 'r', encoding='utf-8') as file:
            data = json.load(file)


        removed_employee = None
        for employee in data:
            if employee['ID'] == employee_id:
                removed_employee = employee
                data.remove(employee)
                break


        with open('the_database.json', 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=2)

        return removed_employee

    def display_success(message):
        success_label = tk.Label(root7, text=message, fg="green")
        success_label.pack()

    def display_error(message):
        error_label = tk.Label(root7, text=message, fg="red")
        error_label.pack()


    def show_employees():
        employee_window = tk.Toplevel(root7)
        employee_window.title("Employee List")

        with open('the_database.json', 'r', encoding='utf-8') as file:
            employees = json.load(file)

        employee_list = tk.Listbox(employee_window, width=50)
        employee_list.pack(padx=10, pady=10)

        for employee in employees:
            employee_info = f"ID: {employee['ID']}, Имя: {employee['Имя']}, Фамилия: {employee['Фамилия']}"
            employee_list.insert(tk.END, employee_info)

    remove_button = tk.Button(root7, text="Удалить", command=remove_employee)
    remove_button.pack()

    show_employees_button = tk.Button(root7, text="Показать сотрудников", command=show_employees)
    show_employees_button.pack()

    root7.mainloop()

def See_everyone_who_wants_to_get_a_job(root4):
    job_seeker_window = tk.Toplevel(root4)
    job_seeker_window.title("Желатели работать")

    with open('user_data.json', 'r', encoding='utf-8') as file:
        data = json.load(file)

    job_seeker_list = tk.Listbox(job_seeker_window, width=100)
    job_seeker_list.pack(side=tk.LEFT, fill=tk.BOTH)

    for user in data:
        info = user['info'].split('\n')
        name = info[0].strip()
        surname = info[1].strip()
        patronymic = info[2].strip()
        age = info[3].strip()
        desired_position = info[4].strip()
        experience = info[5].strip()
        code = user['code']
        job_seeker_list.insert(tk.END, f"{name} {surname} {patronymic} ({age}) - {desired_position}, опыт: {experience} ({code})")

    details_frame = tk.Frame(job_seeker_window)
    details_frame.pack(side=tk.LEFT, fill=tk.BOTH)

    details_text = tk.Text(details_frame, width=50, height=20)
    details_text.pack(fill=tk.BOTH)

    def show_job_seeker_details(event):
        selection = job_seeker_list.curselection()
        if selection:
            index = selection[0]
            user_data = data[index]
            info = user_data['info'].split('\n')
            details_text.delete(1.0, tk.END)
            details_text.insert(tk.END, f"Имя: {info[0].strip()}\n")
            details_text.insert(tk.END, f"Фамилия: {info[1].strip()}\n")
            details_text.insert(tk.END, f"Отчество: {info[2].strip()}\n")
            details_text.insert(tk.END, f"Возраст: {info[3].strip()}\n")
            details_text.insert(tk.END, f"Желаемая должность: {info[4].strip()}\n")
            details_text.insert(tk.END, f"Опыт работы: {info[5].strip()}\n")
            details_text.insert(tk.END, f"Код: {user_data['code']}\n")

    job_seeker_list.bind('<<ListboxSelect>>', show_job_seeker_details)

def create_main_window():
    root4 = tk.Tk()
    root4.title("Приложение")

    button = tk.Button(root4, text="Показать желаемых работников", command=lambda: See_everyone_who_wants_to_get_a_job(root4))
    button.pack()

    root4.mainloop()

def Get_everyone_to_work():
    def load_data(employee_listbox):
        with open('user_data.json', 'r', encoding='utf-8') as file:
            data = json.load(file)

        employee_listbox.delete(0, tk.END)
        for employee in data:
            info = [f"Код: {employee['code']}"]
            info.extend(employee['info'].split())
            employee_listbox.insert(tk.END, '\n'.join(info))

    def transfer_employee(employee_listbox, code_entry):
        code_to_transfer = code_entry.get()
        if not code_to_transfer:
            messagebox.showerror("Ошибка", "Введите код сотрудника")
            return

        with open('user_data.json', 'r', encoding='utf-8') as file:
            data = json.load(file)

        employees_transferred = []
        for employee in data:
            if employee['code'] == code_to_transfer:
                employee_info = employee['info'].split()
                try:
                    experience = int(employee_info[5].strip())
                except (ValueError, IndexError):
                    experience = 0

                new_employee_data = {
                    "Имя": employee_info[0].strip(),
                    "Фамилия": employee_info[1].strip(),
                    "Отчество": employee_info[2].strip(),
                    "Возраст": int(employee_info[3].strip()),
                    "желаемое положение": employee_info[4].strip(),
                    "опыт": experience,
                    "ID": employee_info[6].strip()
                }

                with open('The_database.json', 'a', encoding='utf-8') as new_file:
                    json.dump(new_employee_data, new_file, indent=2, ensure_ascii=False)
                    new_file.write('\n')

                employees_transferred.append(employee)

        for employee in employees_transferred:
            data.remove(employee)

        with open('user_data.json', 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=2, ensure_ascii=False)

        messagebox.showinfo("Успешно", f"Сотрудник с кодом {code_to_transfer} перенесен в The_database.json")
        load_data(employee_listbox)
        code_entry.delete(0, tk.END)

    def create_widgets(root):
        employee_frame = ttk.Frame(root)
        employee_frame.pack(pady=10)
        employee_listbox = tk.Listbox(employee_frame, width=120, height=10)
        employee_listbox.pack(side=tk.LEFT, fill=tk.BOTH)
        employee_scrollbar = ttk.Scrollbar(employee_frame, orient=tk.VERTICAL, command=employee_listbox.yview)
        employee_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        employee_listbox.config(yscrollcommand=employee_scrollbar.set)

        load_data(employee_listbox)

        code_frame = ttk.Frame(root)
        code_frame.pack(pady=10)
        code_label = ttk.Label(code_frame, text="Введите код сотрудника для переноса:")
        code_label.pack(side=tk.LEFT)
        code_entry = ttk.Entry(code_frame, width=10)
        code_entry.pack(side=tk.LEFT, padx=10)
        transfer_button = ttk.Button(code_frame, text="Перенести",
                                     command=lambda: transfer_employee(employee_listbox, code_entry))
        transfer_button.pack(side=tk.LEFT)

        return code_entry

    def show_desired_employees(employee_listbox):
        desired_employees = []
        employee_listbox.selection_clear(0, tk.END)

        for index in employee_listbox.get(0, tk.END):
            info = index.split('\n')
            code = info[0].split(': ')[1]
            try:
                desired_position = info[5].split(': ')[1]
            except IndexError:
                desired_position = ''

            if desired_position:
                desired_employees.append(index)

    root = tk.Tk()
    root.title("Перенос данных сотрудников")
    root.geometry("600x400")


    create_widgets(root)

    root.mainloop()


def fire_employees():
    with open('the_database.json', 'w') as file:
         file.write('[]')

    with open('user_data.json', 'w') as file:
         file.write('[]')











def user():

    # создание класса
    class user:
        # инициализация основного окна приложения
        def __init__(self, master):
            self.master = master
            self.master.title("Home comfort")
            self.Basket = []

            self.label = tk.Label(master, text= Hello)
            self.label.pack()

            self.button_order = tk.Button(master, text = Order, command=self.go_to_order)
            self.button_order.pack()

            self.button_payment = tk.Button(master, text = Payment, command=self.payment)
            self.button_payment.pack()

            self.button_cart = tk.Button(master, text = Basket, command=self.cart)
            self.button_cart.pack()

            self.button_edit_cart = tk.Button(master, text = Edit_the_shopping_cart, command=self.edit_cart)
            self.button_edit_cart.pack()

            self.button_exit = tk.Button(master, text= Exit, command=master.quit)
            self.button_exit.pack()
            # Определение размеров экрана
            screen_width = master.winfo_screenwidth()
            screen_height = master.winfo_screenheight()
            # Определение размеров окна
            window_width = 300
            window_height = 200
            # Вычисление координат для расположения окна по центру
            x = (screen_width // 2) - (window_width // 2)
            y = (screen_height // 2) - (window_height // 2)
            # Установка положения окна
            master.geometry(f"{window_width}x{window_height}+{x}+{y}")

        # общая стоимость товаров в корзине
        def total_price(self):
            Total_price = self.Basket.count('Капучино') * 150 + self.Basket.count('Американо') * 120 + \
                          self.Basket.count('Эспрессо') * 80 + self.Basket.count('Чизкейк') * 100 + \
                          self.Basket.count('Крем-суп') * 250
            return Total_price

        # добавление выбранного товара в корзину.
        def go_to_order(self):
            self.menu_window = tk.Toplevel(self.master)
            self.menu_window.title("Меню заказа")

            self.menu_label = tk.Label(self.menu_window, text="Выберите товар для заказа:")
            self.menu_label.pack()

            self.list_menu = ["Капучино", "Американо", "Эспрессо", "Чизкейк", "Крем-суп"]
            self.menu_buttons = []
            for item in self.list_menu:
                button = tk.Button(self.menu_window, text=item, command=lambda i=item: self.add_to_basket(i))
                button.pack()
                self.menu_buttons.append(button)

            self.close_button = tk.Button(self.menu_window, text="Закрыть", command=self.menu_window.destroy)
            self.close_button.pack()

        def add_to_basket(self, item):
            self.Basket.append(item)
            root1 = tk.Tk()
            root1.title("Сообщение")
            root1.geometry("200x100")
            label_font = font.Font(family="Arial", size=10, weight="bold")
            label_text = tk.Label(root1, text="Добавлено в корзину", font=label_font)
            label_text.place(relx=0.5, rely=0.5, anchor="center")

            def close_window():
                root1.destroy()

            root1.after(500, close_window)
            root.mainloop()

        def edit_cart(self):
            edit_window = tk.Toplevel(self.master)
            edit_window.title("Редактировать корзину")

            self.edit_label = tk.Label(edit_window, text="Выберите товар для редактирования:")
            self.edit_label.pack()

            self.edit_buttons = []
            for item in self.Basket:
                button = tk.Button(edit_window, text=f"{item} ({self.Basket.count(item)})",
                                   command=lambda i=item: self.change_quantity(i, edit_window))
                button.pack()
                self.edit_buttons.append(button)

            self.close_button = tk.Button(edit_window, text="Закрыть", command=edit_window.destroy)
            self.close_button.pack()

        def add_item(self, item, change_window):
            self.Basket.append(item)
            current_quantity = self.Basket.count(item)
            self.change_label.config(text=f"Текущее количество: {current_quantity}")

        def remove_item(self, item, change_window):
            if item in self.Basket:
                self.Basket.remove(item)
            current_quantity = self.Basket.count(item)
            self.change_label.config(text=f"Текущее количество: {current_quantity}")

        def refresh_edit_window(self):
            for button in self.edit_buttons:
                button.destroy()

            for item in self.Basket:
                button = tk.Button(self.edit_window, text=f"{item} ({self.Basket.count(item)})",
                                   command=lambda i=item: self.change_quantity(i, self.edit_window))
                button.pack()
                self.edit_buttons.append(button)

        # оплата
        def payment(self):

            total_price = self.total_price()

            def process_card_payment():
                messagebox.showinfo('Оплата', "Оплата по карте")
                messagebox.showinfo('Оплата', "Спасибо за покупку!")

            def process_cash_payment():
                cash_payment = simpledialog.askinteger("Оплата наличными",
                                                       f"Общая стоимость: {total_price}\nВведите сумму наличных:")
                if cash_payment is not None:
                    if cash_payment > total_price:
                        change = cash_payment - total_price
                        messagebox.showinfo('Оплата', f"Ваша сдача: {change}")
                        messagebox.showinfo('Оплата', "Спасибо за покупку!")
                    elif cash_payment == total_price:
                        messagebox.showinfo('Оплата', "Спасибо за покупку!")
                    else:
                        messagebox.showinfo('Оплата', "Вы не дали достаточно денег для оплаты заказа!")

            payment_window = tk.Toplevel(root)
            payment_window.title("Оплата")
            payment_window.geometry("300x200")
            payment_method_label = tk.Label(payment_window, text=f"Общая сумма к оплате: {total_price} руб.")
            payment_method_label.pack(pady=10)
            payment_method_label = tk.Label(payment_window, text="Выберите способ оплаты:")
            payment_method_label.pack(pady=10)
            card_button = tk.Button(payment_window, text="Оплата картой", command=process_card_payment)
            card_button.pack(pady=5)
            cash_button = tk.Button(payment_window, text="Оплата наличными", command=process_cash_payment)
            cash_button.pack(pady=5)

        # корзина
        def cart(self):
            cart_window = tk.Toplevel(self.master)
            cart_window.title("Корзина")

            self.cart_label = tk.Label(cart_window, text="Содержимое корзины:")
            self.cart_label.pack()

            # Создаем словарь для хранения товаров и их количества
            cart_items = {}
            for item in self.Basket:
                if item in cart_items:
                    cart_items[item] += 1
                else:
                    cart_items[item] = 1

            # Выводим название товара и его количество
            for item, quantity in cart_items.items():
                label = tk.Label(cart_window, text=f"{item}: {quantity}")
                label.pack()

            self.total_price_label = tk.Label(cart_window, text=f"Общая сумма: {self.total_price()} руб.")
            self.total_price_label.pack()

        # редактирование корзины
        def edit_cart(self):
            edit_window = tk.Toplevel(self.master)
            edit_window.title("Редактировать корзину")

            # Создаем словарь для хранения товаров и их количества
            cart_items = {}
            for item in self.Basket:
                if item in cart_items:
                    cart_items[item] += 1
                else:
                    cart_items[item] = 1

            # Создаем кнопки для редактирования количества товаров
            for item, quantity in cart_items.items():
                button = tk.Button(edit_window, text=f"{item} ({quantity})",
                                   command=lambda i=item: self.change_quantity(i, edit_window))
                button.pack()

            self.close_button = tk.Button(edit_window, text="Закрыть", command=edit_window.destroy)
            self.close_button.pack()

        def change_quantity(self, item, edit_window):
            change_window = tk.Toplevel(edit_window)
            change_window.title(f"Изменить количество {item}")

            # Исправление: использование метода count для подсчета количества элементов в списке
            current_quantity = self.Basket.count(item)
            self.change_label = tk.Label(change_window, text=f"Текущее количество: {current_quantity}")
            self.change_label.pack()

            # Исправление: использование правильного метода для добавления/удаления элементов в список
            self.add_button = tk.Button(change_window, text="Увеличить",
                                        command=lambda: self.add_item(item, change_window))
            self.add_button.pack()

            self.remove_button = tk.Button(change_window, text="Уменьшить",
                                           command=lambda: self.remove_item(item, change_window))
            self.remove_button.pack()

    # Создание основного окна
    root = tk.Tk()
    app = user(root)
    root.mainloop()



















def Sending_a_job_application():
    TOKEN = '6795222480:AAFBy7UgYqD41qA08cl9mJDdKpx-9eW5IF4'
    bot = telebot.TeleBot(TOKEN)
    user_data = {}

    @bot.message_handler(commands=['start'])
    def start(message):
        bot.send_message(message.chat.id,
                         "Привет! Отправь мне свои данные: Имя, Фамилию, Отчество, Возраст, Желаемое место работы, Стаж и Айди, каждое на новой строке.")

    @bot.message_handler(func=lambda message: True)
    def get_user_data(message):
        chat_id = message.chat.id
        if chat_id not in user_data:
            user_data[chat_id] = {}
            user_data[chat_id]['info'] = message.text
            user_data[chat_id]['code'] = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
            bot.send_message(chat_id, f"Ваш уникальный код: {user_data[chat_id]['code']}. Пожалуйста, введите код:")
        else:
            if message.text == user_data[chat_id]['code']:
                data = user_data.pop(chat_id)
                with open('user_data.json', 'a', encoding='utf-8') as file:
                    json.dump(data, file, indent=4, ensure_ascii=False)
                bot.send_message(chat_id, "Данные успешно сохранены!")
            else:
                bot.send_message(chat_id, "Неверный код. Попробуйте еще раз.")

    bot.polling()
