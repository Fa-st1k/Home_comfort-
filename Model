import json
import telebot
import json
import random
import string
from view import menu_2


def editing_employees():
    with open('the_database.json', 'r') as f:
        data = json.load(f)

    employee_id = input("Enter the ID of the employee you want to edit: ")
    if any(d["ID"] == employee_id for d in data):
        employee = next(d for d in data if d["ID"] == employee_id)
        print("Employee details:")
        print(f"ID: {employee_id}")
        print(f"Name: {employee['Name']}")
        print(f"Surname: {employee['Surname']}")
        print(f"Middle_name: {employee['Middle_name']}")
        print(f"age: {employee['age']}")
        print(f"desired position: {employee['desired position']}")
        print(f"experience: {employee['experience']}")
        while True:
            choice = input("What would you like to edit? (Name / Surname / Middle_name / age / desired position / experience): ")

            if choice == "Name":
                new_Name = input("Enter the new Name: ")
                employee['Name'] = new_Name
                print("Name updated successfully.")
            elif choice == "Surname":
                new_Surname = int(input("Enter the new age: "))
                employee['Surname'] = new_Surname
                print("Surname updated successfully.")
            elif choice == "Middle_name":
                new_Middle_name = input("Enter the new Middle_name: ")
                employee['Middle_name'] = new_Middle_name
                print("Middle_name updated successfully.")
            elif choice == "age":
                new_age = input("Enter the new age: ")
                employee['age'] = new_age
                print("age updated successfully.")
            elif choice == "desired position":
                new_desired_position = input("Enter the new desired position: ")
                employee['desired position'] = new_desired_position
                print("Desired position updated successfully.")
            elif choice == "experience":
                new_experience = input("Enter the new experience: ")
                employee['experience'] = new_experience
                print("experience updated successfully.")
            elif choice == "exit":
                break
            else:
                print("Invalid choice. Please try again.")

        with open('the_database.json', 'w') as f:
            json.dump(data, f)
            print("Data saved successfully.")

        while True:
            continue_editing = input("Do you want to edit something else for this employee? (yes / no): ")

            if continue_editing == "yes":
                choice = input("What would you like to edit? (Name / Surname / Middle_name / age / desired position / experience): ")

                if choice == "Name":
                    new_Name = input("Enter the new Name: ")
                    employee['Name'] = new_Name
                    print("Name updated successfully.")
                elif choice == "Surname":
                    new_Surname = int(input("Enter the new age: "))
                    employee['Surname'] = new_Surname
                    print("Surname updated successfully.")
                elif choice == "Middle_name":
                    new_Middle_name = input("Enter the new Middle_name: ")
                    employee['Middle_name'] = new_Middle_name
                    print("Middle_name updated successfully.")
                elif choice == "age":
                    new_age = input("Enter the new age: ")
                    employee['age'] = new_age
                    print("age updated successfully.")
                elif choice == "desired position":
                    new_desired_position = input("Enter the new desired position: ")
                    employee['desired position'] = new_desired_position
                    print("Desired position updated successfully.")
                elif choice == "experience":
                    new_experience = input("Enter the new experience: ")
                    employee['experience'] = new_experience
                    print("experience updated successfully.")
                elif choice == "exit":
                    break
                else:
                    print("Invalid choice. Please try again.")

                with open('the_database.json', 'w') as f:
                    json.dump(data, f)
                    print("Data saved successfully.")
            elif continue_editing == "no":
                break
            else:
                print("Invalid choice. Please try again.")

        while True:
            continue_editing_employee = input("Do you want to edit another employee? (yes / no): ")

            if continue_editing_employee == "yes":
                editing_employees()
                break
            elif continue_editing_employee == "no":
                break
            else:
                print("Invalid choice. Please try again.")
    else:
        print("Invalid employee ID.")



def get_all_employees():
    with open('the_database.json', 'r') as f:
        employees = json.load(f)

    for employee in employees:
        try:
            print("FIO:", employee['FIO'])
            print("Age:", employee['age'])
            print("Weight:", employee['weight'])
            print("ID:", employee['ID'])
            print()
        except KeyError:
            print("Missing key in employee data:", employee)

def removing_employees(employee_id):
    # Read the data from the file
    with open('the_database.json', 'r') as file:
        data = json.load(file)

    # Find and remove the employee with the given ID
    removed_employee = None
    for employee in data:
        if employee['ID'] == str(employee_id):
            removed_employee = employee
            data.remove(employee)
            break

    # Write the updated data back to the file
    with open('the_database.json', 'w') as file:
        json.dump(data, file)
    return removed_employee



def See_everyone_who_wants_to_get_a_job():
    with open('user_data.json', 'r', encoding='utf-8') as file:
        data = json.load(file)

        print(json.dumps(data, indent=4, ensure_ascii=False))

def Adding_employees_from_the_jison():
        with open('user_data.json', 'r', encoding='utf-8') as user_file:
            user_data = json.load(user_file)

        with open('the_database.json', 'r', encoding='utf-8') as database_file:
            database = json.load(database_file)

        for user_entry in user_data:
            for db_entry in database:
                if user_entry['code'] == db_entry['ID']:
                    user_info = user_entry['info'].split('\n')
                    db_entry.update({
                        'FIO': user_info[0].strip(),
                        'age': int(user_info[3].strip()),
                        # Добавьте другие поля из данных пользователя по аналогии
                        # Пример:
                        # 'position': user_info[4].strip(),
                        # 'experience': user_info[5].strip(),
                    })

        with open('the_database.json', 'w', encoding='utf-8') as database_file:
            json.dump(database, database_file, indent=4, ensure_ascii=False)


def fire_employees():
     # Clear the contents of the file
    with open('the_database.json', 'w') as file:
         file.write('[]')

















def user():
    n = 1
    Basket = []
    list_menu = ["Cappuccino", "American", "Espresso", "Cheesecake", "Cream soup"]
    while n >= 1 and n < 5:

        def total_price_1():
            global Total_price
            Total_price = Basket.count('Cappuccino') * 150 + Basket.count('American') * 120 + Basket.count(
                'Espresso') * 80 + Basket.count('Cheesecake') * 100 + Basket.count('Cream soup') * 250
            print("You have bought goods for the amount of: ", Total_price)

        def menu_1(menu):
            menu_2()

        print(menu_1(1))
        Action_selection = int(input("Enter the number of the desired action:"))

        def go_to_order_1(go_to_order):
            menu_3 = ("\n─── ⋆⋅☆⋅⋆ ───── ⋆⋅☆⋅⋆ ──\n"
                      "\n 1 - Cappuccino - 150 rubles"
                      "\n 2 - American - 120 rubles"
                      "\n 3 - Espresso - 80 rubles "
                      "\n 4 - Cheesecake - 100 rubles "
                      "\n 5 - Cream soup - 250 rubles"
                      "\n─── ⋆⋅☆⋅⋆ ───── ⋆⋅☆⋅⋆ ──\n")
            print(menu_3)
            go_to_order_2 = int(input("Enter the number of the product you want to order:"))

            if go_to_order_2 == 1:
                Basket.append("Cappuccino")
            elif go_to_order_2 == 2:
                Basket.append('American')
            elif go_to_order_2 == 3:
                Basket.append('Espresso')
            elif go_to_order_2 == 4:
                Basket.append('Cheesecake')
            elif go_to_order_2 == 5:
                Basket.append('Cream soup')

        def payment_1(payment):
            total_price_1()
            print(('\n Enter the payment method:\n 1 - by map \n 2 - in cash '))
            sposob_oplaty = int(input())
            if sposob_oplaty == 2:
                Bill_for_payment = int(input("Enter the amount of payment in cash: "))
                if Bill_for_payment > Total_price:
                    print("Here's your change:", Bill_for_payment - Total_price)
                    print("Thanks for the purchase!")
                elif Bill_for_payment == Total_price:
                    print("Thanks for the purchase!")
                else:
                    print("You did not give enough money to pay for the order!")
            if sposob_oplaty == 1:
                print("Thanks for the purchase!")

        def cart_1(cart):
            print("─── ⋆⋅☆⋅⋆ ───── ⋆⋅☆⋅⋆ ──")
            print('1 - ', 'Cappuccino:', Basket.count('Cappuccino'), " - ", Basket.count('Cappuccino') * 150)
            print('2 - ', 'American:', Basket.count('American'), " - ", Basket.count('American') * 120)
            print('3 - ', 'Espresso:', Basket.count('Espresso'), " - ", Basket.count('Espresso') * 80)
            print('4 - ', 'Cheesecake:', Basket.count('Cheesecake'), " - ", Basket.count('Cheesecake') * 100)
            print('5 - ', 'Cream soup:', Basket.count('Cream soup'), " - ", Basket.count('Cream soup') * 250)

            total_price_1()
            print("─── ⋆⋅☆⋅⋆ ───── ⋆⋅☆⋅⋆ ──")

        def change_basket():

            change = int(input("Enter the sequence number of what you would like to change\n "))
            print("Do you want to change the number", list_menu[change - 1],
                  "?\n 0 - reduce , 1 - increase")
            number = int(input())
            if number == 0:
                number_1 = int(input("Add the number you want to reduce by:"))
                while number_1 > 0:
                    Basket.remove(list_menu[change - 1])
                    number_1 = number_1 - 1
            elif number == 1:
                number_1 = int(input("Add the number you want to increase by: "))
                while number_1 > 0:
                    Basket.append(list_menu[change - 1])
                    number_1 = number_1 - 1

        def editing_cart_1(editing_cart):
            while True:
                cart_1("cart")

                go_mane_menu = input("Do you want to go back? if yes, write (1) \n")
                if int(go_mane_menu) == 1:
                    break
                else:
                    change_basket()


        if Action_selection == 1:
            go_to_order_1("go_to_order")
        elif Action_selection == 2:
            payment_1("payment")
        elif Action_selection == 3:
            cart_1("cart")
        elif Action_selection == 4:
            editing_cart_1("editing_cart")
        elif Action_selection == 5:
            print("Goodbye!")
            break



















def Sending_a_job_application():
    TOKEN = '6795222480:AAFBy7UgYqD41qA08cl9mJDdKpx-9eW5IF4'
    bot = telebot.TeleBot(TOKEN)
    user_data = {}

    @bot.message_handler(commands=['start'])
    def start(message):
        bot.send_message(message.chat.id,
                         "Привет! Отправь мне свои данные: Имя, Фамилию, Отчество, Возраст, Желаемое место работы и Стаж, каждое на новой строке.")

    @bot.message_handler(func=lambda message: True)
    def get_user_data(message):
        chat_id = message.chat.id
        if chat_id not in user_data:
            user_data[chat_id] = {}
            user_data[chat_id]['info'] = message.text
            user_data[chat_id]['code'] = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
            bot.send_message(chat_id, f"Ваш уникальный код: {user_data[chat_id]['code']}. Пожалуйста, введите код:")
        else:
            if message.text == user_data[chat_id]['code']:
                data = user_data.pop(chat_id)
                with open('user_data.json', 'a', encoding='utf-8') as file:
                    json.dump(data, file, indent=4, ensure_ascii=False)
                bot.send_message(chat_id, "Данные успешно сохранены!")
            else:
                bot.send_message(chat_id, "Неверный код. Попробуйте еще раз.")

    bot.polling()
